{
    "contents" : "\n# Everything in this file gets sourced during simInit, and all functions and objects\n# are put into the simList. To use objects and functions, use sim$xxx.\ndefineModule(sim, list(\n  name = \"landisToSpadesTranslator\",\n  description = \"This is a translator using LANDIS II inputs for SpaDES inputs, currently is built for biomass succession mdoel\",\n  keywords = c(\"LANDIS II SpaDES\"),\n  authors = c(person(c(\"Yong\"), \"Luo\", email=\"yluo1@lakeheadu.com\", role=c(\"aut\", \"cre\"))),\n  childModules = character(),\n  version = numeric_version(\"1.1.1\"),\n  spatialExtent = raster::extent(rep(NA_real_, 4)),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\", # e.g., \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.txt\", \"landisToSpadesTranslator.Rmd\"),\n  reqdPkgs = list(\"data.table\", \"dplyr\", \"raster\"),\n  parameters = rbind(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\")),\n    defineParameter(\"speciesInitialTime\", \"numeric\", 0, NA_real_, NA_real_,\n                    \"This describes the simulation time at which the first plot event should occur\"),\n    defineParameter(\"speciesEcoregionInitialTime\", \"numeric\", 0, NA_real_, NA_real_,\n                    \"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\"initialCommunitiesInitialTime\", \"numeric\", 0, NA_real_, NA_real_,\n                    \"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\"ecoregionInitialTime\", \"numeric\", 0, NA_real_, NA_real_,\n                    \"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\"minRelativeBInitialTime\", \"numeric\", 0, NA_real_, NA_real_,\n                    \"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\"sufficientLightInitialTime\", \"numeric\", 0, NA_real_, NA_real_,\n                    \"This describes the simulation time at which the first save event should occur\")\n  ),\n  inputObjects = data.frame(\n    objectName = c(\"landisInputPath\"),\n    objectClass = c(\"character\"),\n    sourceURL = \"\",\n    other = NA_character_,\n    stringsAsFactors = FALSE\n  ),\n  outputObjects = data.frame(\n    objectName = NA_character_,\n    objectClass = NA_character_,\n    other = NA_character_,\n    stringsAsFactors = FALSE\n  )\n))\n\n## event types\n#   - type `init` is required for initialiazation\n\ndoEvent.landisToSpadesTranslator = function(sim, eventTime, eventType, debug = FALSE) {\n  if (eventType == \"init\") {\n    ### check for more detailed object dependencies:\n    ### (use `checkObject` or similar)\n\n    # do stuff for this event\n    sim <- sim$landisToSpadesTranslatorInit(sim)\n\n    # schedule future event(s)\n    sim <- scheduleEvent(sim, params(sim)$landisToSpadesTranslator$speciesInitialTime,\n                         \"landisToSpadesTranslator\", \"species\")\n    sim <- scheduleEvent(sim, params(sim)$landisToSpadesTranslator$speciesEcoregionInitialTime,\n                         \"landisToSpadesTranslator\", \"speciesEcoregion\")\n    sim <- scheduleEvent(sim, params(sim)$landisToSpadesTranslator$initialCommunitiesInitialTime,\n                         \"landisToSpadesTranslator\", \"initialCommunities\")\n    sim <- scheduleEvent(sim, params(sim)$landisToSpadesTranslator$ecoregionInitialTime,\n                         \"landisToSpadesTranslator\", \"ecoregion\")\n    sim <- scheduleEvent(sim, params(sim)$landisToSpadesTranslator$minRelativeBInitialTime,\n                         \"landisToSpadesTranslator\", \"minRelativeB\")\n    sim <- scheduleEvent(sim, params(sim)$landisToSpadesTranslator$sufficientLightInitialTime,\n                         \"landisToSpadesTranslator\", \"sufficientLight\")\n  } \n  return(invisible(sim))\n}\n\n## event functions\n#   - follow the naming convention `modulenameEventtype()`;\n#   - `modulenameInit()` function is required for initiliazation;\n#   - keep event functions short and clean, modularize by calling subroutines from section below.\n\n### template initialization\nlandisToSpadesTranslatorInit <- function(sim) {\n  # # ! ----- EDIT BELOW ----- ! #\n  # load the files from a path that contains landis inputs\n  maxcol <- max(count.fields(file.path(landisInputPath, mainInputFile), sep = \"\"))\n  mainInput <- read.table(file.path(landisInputPath, mainInputFile),\n                          fill = TRUE,\n                          sep = \"\",\n                          header = FALSE,\n                          blank.lines.skip = TRUE,\n                          col.names = c(paste(\"col\",1:maxcol, sep = \"\")),\n                          stringsAsFactor = FALSE)\n  mainInput <- data.table(mainInput)\n  mainInput <- mainInput[col1 != \">>\",]\n  sim$mainInput <- mainInput\n  rm(maxcol)\n  \n  # load the species table\n  maxcol <- max(count.fields(file.path(landisInputPath, speciesFile), sep = \"\"))\n  sim$species <- read.table(file.path(landisInputPath, speciesFile),\n                            fill = TRUE,\n                            sep = \"\",\n                            header = FALSE,\n                            blank.lines.skip = TRUE,\n                            col.names = c(paste(\"col\",1:maxcol, sep = \"\")),\n                            stringsAsFactor = FALSE)\n  rm(maxcol)\n  \n  # input species ecoregion dynamics table\n  maxcol <- max(count.fields(file.path(landisInputPath, speciesEcoregionFile), sep = \"\"))\n  sim$speciesEcoregion <- read.table(file.path(landisInputPath, speciesEcoregionFile),\n                                     fill = TRUE,\n                                     sep = \"\",\n                                     header = FALSE,\n                                     blank.lines.skip = TRUE,\n                                     col.names = c(paste(\"col\",1:maxcol, sep = \"\")),\n                                     stringsAsFactor = FALSE)\n  rm(maxcol)\n  \n  # input initial communities\n  maxcol <- max(count.fields(file.path(landisInputPath, initialCommunitiesFile), sep = \"\"))\n  sim$initialCommunities <- read.table(file.path(landisInputPath, initialCommunitiesFile),\n                                       fill = TRUE,\n                                       sep = \"\",\n                                       blank.lines.skip = TRUE,\n                                       col.names = c(\"species\", paste(\"age\",1:(maxcol-1), sep = \"\")),\n                                       stringsAsFactor = FALSE)\n  \n  # input initial community map\n  sim$initialCommunitiesMap <- raster(file.path(landisInputPath, initialCommunitiesMapFile))\n  \n  # input ecoregion table\n  maxcol <- max(count.fields(file.path(landisInputPath, ecoregionFile), sep = \"\"))\n  sim$ecoregion <- read.table(file.path(landisInputPath, ecoregionFile),\n                              fill = TRUE,\n                              sep = \"\",\n                              header = FALSE,\n                              blank.lines.skip = TRUE,\n                              col.names = c(paste(\"col\",1:maxcol, sep = \"\")),\n                              stringsAsFactor = FALSE)\n  # load ecoregion map\n  sim$ecoregionMap <- raster(file.path(landisInputPath, ecoregionMapFile))\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n### template for save events\nlandisToSpadesTranslatorSpecies <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  species <- sim$species\n  species <- data.table(species[,1:11])\n  species <- species[col1!= \"LandisData\",]\n  species <- species[col1!= \">>\",]\n  names(species) <- c(\"species\", \"longevity\", \"sexualmature\", \"shadetolerance\", \n                      \"firetolerance\", \"seeddistance_eff\", \"seeddistance_max\", \n                      \"resproutprob\", \"resproutage_min\", \"resproutage_max\",\n                      \"postfireregen\")\n  species$longevity <- as.integer(species$longevity)\n  species$sexualmature <- as.integer(species$sexualmature)\n  species$shadetolerance <- as.integer(species$shadetolerance)\n  species$firetolerance <- as.integer(species$firetolerance)\n  species$seeddistance_eff <- as.integer(species$seeddistance_eff)\n  species$seeddistance_max <- as.integer(species$seeddistance_max)\n  species$resproutprob <- as.numeric(species$resproutprob)\n  species$resproutage_min <- as.integer(species$resproutage_min)\n  species$resproutage_max <- as.integer(species$resproutage_max)\n  \n  # obtain other species attribute from main input file\n  speciesAddon <- data.frame(mainInput)\n  startRow <- which(speciesAddon$col1 == \"SpeciesParameters\")\n  speciesAddon <- speciesAddon[(startRow+1):(startRow+nrow(species)),1:6]\n  names(speciesAddon) <- c(\"species\", \"leaflongevity\", \"wooddecayrate\",\n                           \"mortalityshape\", \"growthcurve\", \"leafLignin\")\n  speciesAddon$leaflongevity <- as.numeric(speciesAddon$leaflongevity)\n  speciesAddon$wooddecayrate <- as.numeric(speciesAddon$wooddecayrate)\n  speciesAddon$mortalityshape <- as.numeric(speciesAddon$mortalityshape)\n  speciesAddon$growthcurve <- as.numeric(speciesAddon$growthcurve)\n  speciesAddon$leafLignin <- as.numeric(speciesAddon$leafLignin)\n  speciesAddon <- data.table(speciesAddon, key = \"species\")\n  species <- setkey(species, species)[speciesAddon, nomatch = 0]\n  sim$species <- species\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n### template for save events\nlandisToSpadesTranslatorSpeciesEcoregion <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  speciesEcoregion <- data.table(sim$speciesEcoregion)\n  speciesEcoregion <- speciesEcoregion[col1 != \"LandisData\",]\n  speciesEcoregion <- speciesEcoregion[col1 != \">>\",]\n  names(speciesEcoregion)[1:6] <- c(\"year\", \"ecoregion\", \"species\",\n                                    \"establishprob\", \"maxANPP\", \"maxB\")\n  speciesEcoregion <- speciesEcoregion[,.(year, ecoregion, species,\n                                          establishprob, maxANPP, maxB)]\n  speciesEcoregion$year <- as.integer(speciesEcoregion$year)\n  speciesEcoregion$establishprob <- as.numeric(speciesEcoregion$establishprob)\n  speciesEcoregion$maxANPP <- as.integer(speciesEcoregion$maxANPP)\n  speciesEcoregion$maxB <- as.integer(speciesEcoregion$maxB)\n  sim$speciesEcoregion <- speciesEcoregion\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n### template for save events\nlandisToSpadesTranslatorInitialCommunities <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  initialCommunities <- sim$initialCommunities\n  initialCommunities <- data.table(initialCommunities)\n  initialCommunities <- initialCommunities[species != \"LandisData\",]\n  initialCommunities <- initialCommunities[species != \">>\",]\n  initialCommunities <- cbind(data.table(mapcode = 1:nrow(initialCommunities),\n                                         description = NA),\n                              initialCommunities)\n  mapcodeindex <- which(initialCommunities$species == \"MapCode\")\n  for (i in 1:(length(mapcodeindex)-1)){\n    initialCommunities$mapcode[(mapcodeindex[i]+1):(mapcodeindex[i+1]-1)] <- as.numeric(initialCommunities$age1[mapcodeindex[i]])\n  }\n  initialCommunities <- initialCommunities[species != \"MapCode\",] %>%\n    data.frame\n  for(i in 4:ncol(initialCommunities)){\n    initialCommunities[,i] <- as.integer(initialCommunities[,i])\n  }\n  initialCommunities <- data.table(initialCommunities)\n  sim$initialCommunities <- initialCommunities\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n### template for save events\nlandisToSpadesTranslatorEcoregion <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  ecoregion <- sim$ecoregion\n  ecoregion <- data.table(ecoregion)\n  ecoregion <- ecoregion[col1 != \"LandisData\",]\n  ecoregion <- ecoregion[col1 != \">>\",]\n  names(ecoregion)[1:4] <- c(\"active\", \"mapcode\", \"ecoregion\", \"description\")\n  ecoregion$mapcode <- as.integer(ecoregion$mapcode)\n  sim$ecoregion <- ecoregion\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\nlandisToSpadesTranslatorMinRelativeB <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  minRelativeB <- sim$mainInput %>%\n    data.frame\n  startRow <- which(minRelativeB$col1 == \"MinRelativeBiomass\")\n  minRelativeB <- minRelativeB[(startRow+1):(startRow+6),]\n  minRelativeB[1,2:ncol(minRelativeB)] <- minRelativeB[1,1:(ncol(minRelativeB)-1)]\n  names(minRelativeB) <- NULL\n  minRelativeB <- minRelativeB[,-1] %>%\n    t(.) %>%\n    gsub(pattern=\"%\",replacement=\"\") %>%\n    data.table\n  names(minRelativeB) <- c(\"ecoregion\", \"X1\", \"X2\", \"X3\", \"X4\", \"X5\")\n  minRelativeB <- minRelativeB %>%\n    mutate_each(funs(as.numeric(as.character(.))/100), vars=-ecoregion)\n  sim$minRelativeB <- minRelativeB\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\nlandisToSpadesTranslatorSufficientLight <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  sufficientLight <- sim$mainInput %>%\n    data.frame\n  startRow <- which(sufficientLight$col1 == \"SufficientLight\")\n  sufficientLight <- sufficientLight[(startRow+1):(startRow+5), 1:7]\n  for(i in 1:ncol(sufficientLight)){\n    sufficientLight[,i] <- as.numeric(sufficientLight[,i])\n  }\n  names(sufficientLight) <- c(\"speciesshadetolerance\",\n                              \"X0\", \"X1\", \"X2\", \"X3\", \"X4\", \"X5\")\n  sim$sufficientLight <- sufficientLight\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n",
    "created" : 1457721976377.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2044812475",
    "id" : "98B5B496",
    "lastKnownWriteTime" : 1457731818,
    "path" : "~/GitHub/landisToSpadesTranslator/landisToSpadesTranslator/landisToSpadesTranslator.R",
    "project_path" : "landisToSpadesTranslator/landisToSpadesTranslator.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}