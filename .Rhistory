library(SpaDES)
newModule("landisToSpadesTranslator")
landisInputPath <- "C:/Users/yonluo/Documents/simulations/boreal plain"
speciesFN <- "SpeciesAttributes_LANDIS_II_BO_PLAINS.txt"
species <- read.table(file.path(landisInputPath, speciesFN),
fill = TRUE,
sep = "",
header = FALSE,
stringsAsFactor = FALSE)
species
landisInputPath <- "C:/Users/yonluo/Documents/simulations/boreal plain"
speciesFN <- "SpeciesAttributes_LANDIS_II_BO_PLAINS.txt"
sim$species <- read.table(file.path(landisInputPath, speciesFN),
fill = TRUE,
sep = "",
header = FALSE,
stringsAsFactor = FALSE)
species <- read.table(file.path(landisInputPath, speciesFN),
fill = TRUE,
sep = "",
header = FALSE,
stringsAsFactor = FALSE)
species
maxcol <- max(count.fields(file.path(landisInputPath, mainInputFN), sep = ""))
mainInputFN <- "main_input_file_BO_PLAINS.txt"
maxcol <- max(count.fields(file.path(landisInputPath, mainInputFN), sep = ""))
maxcol
c(paste("col",1:maxcol, sep = ""))
mainInput <- read.table(file.path(landisInputPath, mainInputFN),
fill = TRUE,
sep = "",
header = FALSE,
blank.lines.skip = TRUE,
col.names = c(paste("col",1:maxcol, sep = "")),
stringsAsFactor = FALSE)
mainInput
mainInput$col1
speciesFN
maxcol <- max(count.fields(file.path(landisInputPath, speciesFN), sep = ""))
sim$species <- read.table(file.path(landisInputPath, speciesFN),
fill = TRUE,
sep = "",
header = FALSE,
blank.lines.skip = TRUE,
col.names = c(paste("col",1:maxcol, sep = "")),
stringsAsFactor = FALSE)
species <- read.table(file.path(landisInputPath, speciesFN),
fill = TRUE,
sep = "",
header = FALSE,
blank.lines.skip = TRUE,
col.names = c(paste("col",1:maxcol, sep = "")),
stringsAsFactor = FALSE)
species
species
species <- data.table(species)
library(data.table)
species <- data.table(species)
species <- species[col1!= "LandisData" | col1 != ">>",]
species
species <- species[col1!= "LandisData",]
species
species <- species[col1!= ">>",]
species
names(species) <- c("species", "longevity", "sexualmature", "shadetolerance",
"firetolerance", "seeddistance_eff", "seeddistance_max",
"resproutprob", "resproutage_min", "resproutage_max",
"postfireregen")
names(species)[1:11] <- c("species", "longevity", "sexualmature", "shadetolerance",
"firetolerance", "seeddistance_eff", "seeddistance_max",
"resproutprob", "resproutage_min", "resproutage_max",
"postfireregen")
species
speciesFN <- "SpeciesAttributes_LANDIS_II_BO_PLAINS.txt"
maxcol <- max(count.fields(file.path(landisInputPath, speciesFN), sep = ""))
species <- read.table(file.path(landisInputPath, speciesFN),
fill = TRUE,
sep = "",
header = FALSE,
blank.lines.skip = TRUE,
col.names = c(paste("col",1:maxcol, sep = "")),
stringsAsFactor = FALSE)
species[,1:11]
species <- data.table(species[,1:11])
species
species <- species[col1!= "LandisData",]
species <- species[col1!= ">>",]
species
names(species) <- c("species", "longevity", "sexualmature", "shadetolerance",
"firetolerance", "seeddistance_eff", "seeddistance_max",
"resproutprob", "resproutage_min", "resproutage_max",
"postfireregen")
species
species <- read.table(file.path(landisInputPath, speciesFN),
fill = TRUE,
sep = "",
header = FALSE,
blank.lines.skip = TRUE,
col.names = c(paste("col",1:maxcol, sep = "")),
stringsAsFactor = FALSE)
species[,2:10] <- as.numeric(species[,2:10])
species
species <- species[,1:11]
species[,2:10] <- as.numeric(species[,2:10])
species
species <- data.table(species[,1:11])
species <- species[col1!= "LandisData",]
species <- species[col1!= ">>",]
names(species) <- c("species", "longevity", "sexualmature", "shadetolerance",
"firetolerance", "seeddistance_eff", "seeddistance_max",
"resproutprob", "resproutage_min", "resproutage_max",
"postfireregen")
species
species$longevity <- as.numeric(species$longevity)
species$longevity <- as.integer(species$longevity)
species
species$longevity <- as.integer(species$longevity)
species$sexualmature <- as.integer(species$sexualmature)
species$shadetolerance <- as.integer(species$shadetolerance)
species$firetolerance <- as.integer(species$firetolerance)
species$seeddistance_eff <- as.integer(species$seeddistance_eff)
species$seeddistance_max <- as.integer(species$seeddistance_max)
species$resproutprob <- as.numeric(species$resproutprob)
species$resproutage_min <- as.integer(species$resproutage_min)
species$resproutage_max <- as.integer(species$resproutage_max)
species
mainInput
mainInput$col1
mainInput <- data.table(mainInput)
mainInput <- mainInput[col1 != "<<",]
mainInput
mainInput$col1
mainInput <- mainInput[col1 != ">>",]
mainInput$col1
speciesAddon <- data.frame(mainInput)
startRow <- which(speciesAddon$col1 == "SpeciesParameters")
startRow
startRow
nrow(species)
startRow <- which(speciesAddon$col1 == "SpeciesParameters")+1
startRow
startRow <- which(speciesAddon$col1 == "SpeciesParameters")
speciesAddon <- speciesAddon[(startRow+1):(startRow+nrow(species)),1:10]
speciesAddon
speciesAddon <- speciesAddon[(startRow+1):(startRow+nrow(species)),1:6]
speciesAddon
speciesAddon <- data.frame(mainInput)
startRow <- which(speciesAddon$col1 == "SpeciesParameters")
speciesAddon <- speciesAddon[(startRow+1):(startRow+nrow(species)),1:6]
speciesAddon
names(speciesAddon) <- c("species", "leaflongevity", "wooddecayrate",
"mortalityshape", "growthcurve", "leafLignin")
speciesAddon
as.numeric(speciesAddon)
speciesAddon <- data.table(speciesAddon, key = "species")
speciesAddon <- data.frame(mainInput)
startRow <- which(speciesAddon$col1 == "SpeciesParameters")
speciesAddon <- speciesAddon[(startRow+1):(startRow+nrow(species)),1:6]
names(speciesAddon) <- c("species", "leaflongevity", "wooddecayrate",
"mortalityshape", "growthcurve", "leafLignin")
speciesAddon$leaflongevity <- as.numeric(speciesAddon$leaflongevity)
speciesAddon$wooddecayrate <- as.numeric(speciesAddon$wooddecayrate)
speciesAddon$mortalityshape <- as.numeric(speciesAddon$mortalityshape)
speciesAddon$growthcurve <- as.numeric(speciesAddon$growthcurve)
speciesAddon$leafLignin <- as.numeric(speciesAddon$leafLignin)
speciesAddon <- data.table(speciesAddon, key = "species")
speciesAddon
species <- setkey(species, species)[speciesAddon, nomatch = 0]
species
speciesEcoregionFN <- "dynamic_input_BO_PLAINS_LANDIS_II_baseline.txt"
maxcol <- max(count.fields(file.path(landisInputPath, speciesEcoregionFN), sep = ""))
speciesEcoregion <- read.table(file.path(landisInputPath, speciesEcoregionFN),
fill = TRUE,
sep = "",
header = FALSE,
blank.lines.skip = TRUE,
col.names = c(paste("col",1:maxcol, sep = "")),
stringsAsFactor = FALSE)
speciesEcoregion
speciesEcoregion[1:10,]
speciesEcoregion <- data.table(speciesEcoregion)
speciesEcoregion <- speciesEcoregion[ecol1 != "LandisData",]
speciesEcoregion <- speciesEcoregion[col1 != "LandisData",]
speciesEcoregion <- speciesEcoregion[col1 != ">>",]
speciesEcoregion
names(speciesEcoregion)[1:6] <- c("year", "ecoregion", "species",
"establishprob", "maxANPP", "maxB")
speciesEcoregion
speciesEcoregion <- speciesEcoregion[,.(year, ecoregion, species,
establishprob, maxANPP, maxB)]
speciesEcoregion
speciesEcoregion$year <- as.integer(speciesEcoregion$year)
speciesEcoregion$year <- as.integer(speciesEcoregion$year)
speciesEcoregion$establishprob <- as.numeric(speciesEcoregion$establishprob)
speciesEcoregion$maxANPP <- as.integer(speciesEcoregion$maxANPP)
speciesEcoregion$maxB <- as.integer(speciesEcoregion$maxB)
speciesEcoregion
initialCommunitiesFN <- "BO_PLAINS_species.dat"
maxcol <- max(count.fields(file.path(landisInputPath, iniComm), sep = ""))
maxcol <- max(count.fields(file.path(landisInputPath, initialCommunitiesFN), sep = ""))
initialCommunities <- read.table(file.path(landisInputPath, initialCommunitiesFN),
fill = TRUE,
sep = "",
blank.lines.skip = TRUE,
col.names = c("species", paste("age",1:(maxcol-1), sep = "")),
stringsAsFactor = FALSE)
initialCommunities
initialCommunities[1:10,]
initialCommunities <- data.table(initialCommunities)
initialCommunities <- initialCommunities[species != "LandisData",]
initialCommunities <- initialCommunities[species != ">>",]
initialCommunities
initialCommunities <- cbind(data.table(mapcode = 1:nrow(initialCommunities),
description = NA),
initialCommunities)
initialCommunities
mapcodeindex <- which(initialCommunities$species == "MapCode")
for (i in 1:(length(mapcodeindex)-1)){
initialCommunities$mapcode[(mapcodeindex[i]+1):(mapcodeindex[i+1]-1)] <- as.numeric(initialCommunities$age1[mapcodeindex[i]])
}
initialCommunities <- initialCommunities[species != "MapCode",]
initialCommunities
initialCommunities <- initialCommunities[species != "MapCode",] %>%
data.frame
library(dplyr)
initialCommunities <- initialCommunities[species != "MapCode",] %>%
data.frame
initialCommunities
initialCommunities[,4]
initialCommunities[,4] <- as.integer(initialCommunities[,4])
initialCommunities
initialCommunities[,5] <- as.integer(initialCommunities[,5])
initialCommunities[,6] <- as.integer(initialCommunities[,6])
initialCommunities
names(initialCommunities)
for(i in 4:ncol(initialCommunities)){
initialCommunities[,i] <- as.integer(initialCommunities[,i])
}
initialCommunities <- data.table(initialCommunities)
initialCommunities
ecoregionFN <- "landtypes_BP.txt"
maxcol <- max(count.fields(file.path(landisInputPath, ecoregionFN), sep = ""))
ecoregion <- read.table(file.path(landisInputPath, ecoregionFN),
fill = TRUE,
sep = "",
header = FALSE,
blank.lines.skip = TRUE,
col.names = c(paste("col",1:maxcol, sep = "")),
stringsAsFactor = FALSE)
ecoregion
ecoregion[1:10,]
ecoregion <- ecoregion[col1 != "LandisData",]
ecoregion <- data.table(ecoregion)
ecoregion <- ecoregion[col1 != "LandisData",]
ecoregion
names(ecoregion)[1:4] <- c("active", "mapcode", "ecoregion", "description")
ecoregion
ecoregion$mapcode <- as.integer(ecoregion$mapcode)
ecoregion
mainInput
minRelativeB <- mainInput
minRelativeB
mainInput$col1
mainInput$col1
startRow <- which(minRelativeB$col1 == "MinRelativeBiomass")
startRow
minRelativeB <- mainInput %>%
data.frame
startRow <- which(minRelativeB$col1 == "MinRelativeBiomass")
minRelativeB <- minRelativeB[(startRow+1):(startRow+6),]
minRelativeB
names(minRelativeB) <- NULL
minRelativeB <- minRelativeB[,-1] %>%
t(.) %>%
gsub(pattern="%",replacement="")
minRelativeB
minRelativeB <- mainInput %>%
data.frame
startRow <- which(minRelativeB$col1 == "MinRelativeBiomass")
minRelativeB <- minRelativeB[(startRow+1):(startRow+6),]
minRelativeB
minRelativeB[1,2:ncol(minRelativeB)]
minRelativeB[1,1:(ncol(minRelativeB)-1)]
minRelativeB[1,2:ncol(minRelativeB)] <- minRelativeB[1,1:(ncol(minRelativeB)-1)]
minRelativeB
names(minRelativeB) <- NULL
minRelativeB <- minRelativeB[,-1] %>%
t(.) %>%
gsub(pattern="%",replacement="")
minRelativeB
names(minRelativeB) <- c("ecoregion", "X1", "X2", "X3", "X4", "X5")
minRelativeB <- minRelativeB %>%
mutate_each(funs(as.numeric(as.character(.))/100), vars=-ecoregion)
minRelativeB
minRelativeB <- mainInput %>%
data.frame
startRow <- which(minRelativeB$col1 == "MinRelativeBiomass")
minRelativeB <- minRelativeB[(startRow+1):(startRow+6),]
minRelativeB[1,2:ncol(minRelativeB)] <- minRelativeB[1,1:(ncol(minRelativeB)-1)]
names(minRelativeB) <- NULL
minRelativeB <- minRelativeB[,-1] %>%
t(.) %>%
gsub(pattern="%",replacement="")
minRelativeB
minRelativeB[1:10,]
names(minRelativeB) <- c("ecoregion", "X1", "X2", "X3", "X4", "X5")
minRelativeB
minRelativeB[1:10,]
minRelativeB <- mainInput %>%
data.frame
startRow <- which(minRelativeB$col1 == "MinRelativeBiomass")
minRelativeB <- minRelativeB[(startRow+1):(startRow+6),]
minRelativeB[1,2:ncol(minRelativeB)] <- minRelativeB[1,1:(ncol(minRelativeB)-1)]
names(minRelativeB) <- NULL
minRelativeB <- minRelativeB[,-1] %>%
t(.) %>%
gsub(pattern="%",replacement="")
minRelativeB
minRelativeB[1:10,]
is.data.frame(minRelativeB)
minRelativeB <- mainInput %>%
data.frame
startRow <- which(minRelativeB$col1 == "MinRelativeBiomass")
minRelativeB <- minRelativeB[(startRow+1):(startRow+6),]
minRelativeB[1,2:ncol(minRelativeB)] <- minRelativeB[1,1:(ncol(minRelativeB)-1)]
names(minRelativeB) <- NULL
minRelativeB <- minRelativeB[,-1] %>%
t(.) %>%
gsub(pattern="%",replacement="") %>%
data.table
names(minRelativeB) <- c("ecoregion", "X1", "X2", "X3", "X4", "X5")
minRelativeB
minRelativeB <- minRelativeB %>%
mutate_each(funs(as.numeric(as.character(.))/100), vars=-ecoregion)
minRelativeB
minRelativeB
sufficientLight <- sim$mainInput %>%
data.frame
sufficientLight <- mainInput %>%
data.frame
sufficientLight$col1
minRelativeB <- minRelativeB[(startRow+1):(startRow+5),]
sufficientLight <- sufficientLight[(startRow+1):(startRow+5),]
sufficientLight
sufficientLight <- mainInput %>%
data.frame
startRow <- which(sufficientLight$col1 == "SufficientLight")
startRow
sufficientLight <- sufficientLight[(startRow+1):(startRow+5),]
sufficientLight
sufficientLight <- mainInput %>%
data.frame
startRow <- which(sufficientLight$col1 == "SufficientLight")
sufficientLight <- sufficientLight[(startRow+1):(startRow+5), 1:7]
sufficientLight
sufficientLight <- as.numeric(sufficientLight)
for(i in 1:ncol){
sufficientLight[,i] <- as.numeric(sufficientLight[,i])
}
for(i in 1:ncol(sufficientLight)){
sufficientLight[,i] <- as.numeric(sufficientLight[,i])
}
sufficientLight
names(sufficientLight) <- c("speciesshadetolerance",
"X0", "X1", "X2", "X3", "X4", "X5")
path
rm(list=ls())
path <- list(modulePath=file.path("~/GitHub/landisToSpadesTranslator"),
outputPath="~/output")
modules <- list("landisToSpadesTranslator")
times <- list(start = 0, end = 1)
landisInputPath <- "C:/Users/yonluo/Documents/simulations/boreal plain"
mainInputFile <- "main_input_file_BO_PLAINS.txt"
speciesFile <- "SpeciesAttributes_LANDIS_II_BO_PLAINS.txt"
speciesEcoregionFile <- "dynamic_input_BO_PLAINS_LANDIS_II_baseline.txt"
initialCommunitiesFile <- "BO_PLAINS_species.dat"
initialCommunitiesMapFile <- "initialCommunitiesMap.tif"
ecoregionFile <- "landtypes_BP.txt"
ecoregionMapFile <- "landtypes_BP.tif"
objects <- list("landisInputPath" = landisInputPath,
"mainInputFile" = mainInputFile,
"speciesFile" = speciesFile,
"speciesEcoregionFile" = speciesEcoregionFile,
"initialCommunitiesFile" = initialCommunitiesFile,
"initialCommunitiesMapFile" = initialCommunitiesMapFile,
"ecoregionFile" = ecoregionFile,
"ecoregionMapFile" = ecoregionMapFile)
parameters <- list(.progress = list(),
.globals = list(),
landisToSpadesTranslator = list())
mySim <- simInit(times=times, params=parameters, modules=modules,
objects=objects, paths=path)
mySim <- spades(mySim, debug=FALSE)
mySim <- simInit(times=times, params=parameters, modules=modules,
objects=objects, paths=path)
mySim <- spades(mySim, debug=FALSE)
